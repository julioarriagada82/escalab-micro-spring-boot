package com.devs4j.users.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import proyecto.escalab.microservicio.users.entities.User;
import proyecto.escalab.microservicio.users.entities.UserInRole;
import proyecto.escalab.microservicio.users.repositories.UserInRoleRepository;
import proyecto.escalab.microservicio.users.repositories.UserRepository;

@Service
public class Devs4jUserDetailsService implements UserDetailsService{

	@Autowired
	private UserInRoleRepository userInRolRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		
		Optional<User> optional = userRepository.findByUsername(username);
		
		if(optional.isPresent())
		{
			User user = optional.get();
			List<UserInRole> userInRole = userInRolRepository.findByUser(user);
			
			String[] roles = userInRole.stream().map(f -> f.getRole().getName()).toArray(String[]::new);
			
			return org.springframework.security.core.userdetails
					.User.withUsername(user.getUsername())
					.password(passwordEncoder.encode(user.getPassword()))
					.roles(roles)
					.build();
		} else {
			throw new UsernameNotFoundException("Username " + username + " not found");
		}
	}

}
